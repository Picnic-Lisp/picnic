;; This file is Part of the twingo-Lisp research project
;;
;; Copyright (c) 2020 Timo Sarkar
;;
;; Permission is hereby granted, free of charge, to any person obtaining a copy
;; of this software and associated documentation files (the "Software"), to
;; deal in the Software without restriction, including without limitation the
;; rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
;; sell copies of the Software, and to permit persons to whom the Software is
;; furnished to do so, subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included in
;; all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
;; IN THE SOFTWARE.

(defmacro define-route (name)
  (setq fmt (go:import fmt))
  (setq log (go:import log))
  (setq net/http (go:import net/http)))
       ;; (defun handler (w http.ResponseWriter, r *http.Request)
       ;; (go (fmt.Fprintf w, "Hi there, I love %s!", r.URL.Path[1:])))

  (defmacro define-port (port)
    (defun main (port)
      ;; (go (http.HandleFunc("/", handler)))
      (go (log.Fatal(http.ListenAndServe(port, null))))))

  ;; sample server:
  ;;
  ;; (define-route server ()
  ;;   (defun handler (w http.ResponseWriter, r *http.Request)
  ;;   (go (fmt.Fprintf w, "Hi there, I love %s!", r.URL.Path[1:])))))
  ;;
  ;; (define-port 8000 ()
  ;;   (go (http.HandleFunc("/", handler))))
  ;;
  ;; Should response with Listening to Port:8000! 

