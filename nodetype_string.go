/*
* This file is Part of the Picnic-Lisp research project
*
* Copyright (c) 2020 Timo Sarkar
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

// Code generated by "stringer -type NodeType ."; DO NOT EDIT.

package picnic

import "strconv"

func _() {
	var x [1]struct{}
	_ = x[NodeNil-0]
	_ = x[NodeT-1]
	_ = x[NodeInt-2]
	_ = x[NodeDouble-3]
	_ = x[NodeString-4]
	_ = x[NodeQuote-5]
	_ = x[NodeBquote-6]
	_ = x[NodeIdent-7]
	_ = x[NodeLambda-8]
	_ = x[NodeSpecial-9]
	_ = x[NodeBuiltinfunc-10]
	_ = x[NodeCell-11]
	_ = x[NodeAref-12]
	_ = x[NodeEnv-13]
	_ = x[NodeError-14]
	_ = x[NodeGoValue-15]
}

const _NodeType_name = "NodeNilNodeTNodeIntNodeDoubleNodeStringNodeQuoteNodeBquoteNodeIdentNodeLambdaNodeSpecialNodeBuiltinfuncNodeCellNodeArefNodeEnvNodeErrorNodeGoValue"

var _NodeType_index = [...]uint8{0, 7, 12, 19, 29, 39, 48, 58, 67, 77, 88, 103, 111, 119, 126, 135, 146}

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeType_index)-1) {
		return "NodeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _NodeType_name[_NodeType_index[i]:_NodeType_index[i+1]]
}
